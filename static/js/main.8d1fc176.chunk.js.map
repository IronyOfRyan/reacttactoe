{"version":3,"sources":["view/styles.js","view/square.js","components/GameAI.js","components/Board.js","components/App.js","index.js"],"names":["flickerAnimation","keyframes","_templateObject","hideStatus","_templateObject2","AppWrapper","styled","div","_templateObject3","BoardWrap","_templateObject4","GameTitle","h1","_templateObject5","Status","_templateObject6","Reset","_templateObject7","ResetButton","button","_templateObject8","props","gameover","BoardRow","_templateObject9","Psquares","_templateObject10","player","OverlayCSS","_templateObject11","Square","react_default","a","createElement","style","pointerEvents","disabled","onClick","getAvailableSpots","board","result","i","length","push","calculateWinner","winningRows","_winningRows$i","Object","slicedToArray","b","c","minimize","bestMove","moves","bestValue","hValue","maximize","Array","isArray","Board","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","renderSquare","winner","state","squares","toConsumableArray","square","value","myTurn","handleClick","renderOverlay","gameWinner","handleReset","concat","includes","setState","currentState","setTimeout","best","fill","resetButton","userScore","aiScore","Component","App","Board_Board","render","App_App","document","getElementById"],"mappings":"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","file":"static/js/main.8d1fc176.chunk.js","sourcesContent":["// styled-components used instead of plain css for personal perference of keeping everything JS\r\nimport styled, {keyframes} from 'styled-components';\r\n\r\n// const GlobalStyle = createGlobalStyle`\r\n//   html {\r\n//     height: 100%;\r\n//     width: 100%;\r\n//   }\r\n// `;\r\n\r\nconst flickerAnimation = keyframes`\r\n  0%   { opacity:1; }\r\n  50%  { opacity:0; }\r\n  100% { opacity:1 }\r\n`;\r\n\r\nconst hideStatus = keyframes`\r\n  0% {\r\n    opacity: 1;\r\n    visibility: visible;\r\n  }\r\n  100% {\r\n    opacity: 0;\r\n    visibility: hidden;\r\n  }\r\n`;\r\n\r\nconst AppWrapper = styled.div`\r\n  margin: 0 auto;\r\n  clear: both;\r\n  align-items: center;\r\n  background: #673AB7;  /* fallback for old browsers */\r\n  background: -webkit-linear-gradient(to top, #512DA8, #673AB7);  /* Chrome 10-25, Safari 5.1-6 */\r\n  background: linear-gradient(to top, #512DA8, #673AB7); /* W3C, IE 10+/ Edge, Firefox 16+, Chrome 26+, Opera 12+, Safari 7+ */\r\n  display: flex;\r\n  flex-direction: column;\r\n  font-family: Fascinate, sans-serif;\r\n  height:100vh;\r\n  word-wrap: break-word;\r\n`;\r\n\r\nconst BoardWrap = styled.div`\r\n  // background-color: #6190E8;\r\n  margin-top: 150px;\r\n  -webkit-user-select: none; /* Safari 3.1+ */\r\n  -moz-user-select: none; /* Firefox 2+ */\r\n  -ms-user-select: none; /* IE 10+ */\r\n  user-select: none; /* Standard syntax */\r\n`;\r\n\r\nconst GameTitle = styled.h1`\r\n  background: #a044ff;\r\n  border-radius: -1px;\r\n  border: .5px solid #cbb4d4;\r\n  color: #cbb4d4;\r\n  float: none;\r\n  font-size: 40px;\r\n  font-weight: bold;\r\n  height: 40px;\r\n  line-height: 40px;\r\n  margin-left: 40px;\r\n  padding: auto;\r\n  text-align: center;\r\n  width: 420px;\r\n`;\r\n\r\nconst Status = styled.div`\r\n  animation: ${hideStatus /* fades out status div after 5 seconds*/} 5s ease-in .2s forwards;\r\n  background: #cbb4d4;\r\n  border-radius: 2px;\r\n  box-shadow: 0 0 0 2px #cbb4d4, 2px 1px 2px 3px rgba(10, 10, 0, 0.5);\r\n  color:#a044ff;\r\n  font-size: 14px;\r\n  font-weight: bold;\r\n  line-height: 50px;\r\n  float: none;\r\n  height: 50px;\r\n  margin-left: 160px;\r\n  margin-bottom: 50px;\r\n  padding: auto;\r\n  text-align: center;\r\n  width: 200px;\r\n`;\r\n\r\nconst Reset = styled.div`\r\n  margin-bottom: 20px;\r\n  \r\n`;\r\n\r\nconst ResetButton = styled.button`\r\n  background: #cbb4d4;\r\n  border: .5px solid #a044ff;\r\n  box-shadow: 0 0 0 2px #cbb4d4, 2px 1px 2px 3px rgba(10, 10, 0, 0.5);\r\n  color: #a044ff;\r\n  font-family: Fascinate, sans-serif;\r\n  font-size: 24px;\r\n  font-weight: bold;\r\n  height: 40px;\r\n  line-height: 20px;\r\n  margin-left: 160px;\r\n  margin-top: 10px;\r\n  opacity: 1;\r\n  padding: 1px;\r\n  text-align: center;\r\n  width: 200px;\r\n  visibility: ${\r\n    // prop to hide reset button when game is over\r\n      props => props.gameover ? \"visible\" : \"hidden\"\r\n    };\r\n\r\n    &:hover {\r\n      background: #a044ff;\r\n      border: 1px dashed #a044ff;\r\n      box-shadow: 0 0 0 2px #a044ff, 2px 1px 2px 3px rgba(10, 10, 0, 0.5);\r\n      text-shadow: -1px #cbb4d4;\r\n      color: #cbb4d4;\r\n      float: none;\r\n    }\r\n\r\n    &:focus {\r\n      outline: none;\r\n    }\r\n`;\r\n\r\nconst BoardRow = styled.div`\r\n  &:after {\r\n    clear: both;\r\n    content: \"\";\r\n    display: table;\r\n  }\r\n`;\r\n\r\nconst Psquares = styled.button`\r\n  background: ${\r\n    // Props used to input player square colors when given a value\r\n    props => props.player === 'player' ? \"#cbb4d4\" : props.player === 'AI' ? \"#000046\" : \"#a044ff\"\r\n  };\r\n  color: ${\r\n    props => props.player === 'player' ? \"#a044ff\" : props.player === 'AI' ? \"#B2FEFA\" : \"#F00000\"\r\n  };\r\n  border:${\r\n    props => props.player === 'player' ? \"1px dashed #cbb4d4\" : props.player === 'AI' ? \"1px dashed #000046\" : \"1px dashed #a044ff\"\r\n  };\r\n  border-radius: 2px;\r\n  box-shadow: ${\r\n    props => props.player === 'player' ? \"0 0 0 4px #cbb4d4, 1px 4px 10px 10px rgba(60, 52, 102, 0.9)\" : props.player === 'AI' ? \"0 0 0 4px #000046, 4px 2px 12px 8px rgba(10, 10, 0, 0.3)\" : \"0 0 0 4px #a044ff, 2px 1px 6px 4px rgba(10, 10, 0, 0.5)\"\r\n  };\r\n  float: left;\r\n  font-family: Fascinate, sans-serif;\r\n  font-size: 50px;\r\n  font-weight: bold;\r\n  height: 150px;\r\n  width: 150px;\r\n  margin: 10px;\r\n  text-align: center;\r\n  text-shadow: 1px .6px #grey;\r\n\r\n    &:focus {\r\n      outline: none;\r\n    }\r\n    &:hover {\r\n      background: #cbb4d4;\r\n      border: 1px dashed #cbb4d4;\r\n      border-radius: 1px;\r\n      box-shadow: 0 0 0 4px #cbb4d4, 2px 1px 6px 4px rgba(10, 10, 0, 0.5);\r\n      opacity: 1;\r\n    }\r\n`;\r\n\r\nconst OverlayCSS = styled.div`\r\n  animation: ${flickerAnimation} 5s infinite;\r\n  background: ${\r\n    // Match overlay with whoever won\r\n    props => props.player === 'O' ? \"#cbb4d4\" : props.player === 'X' ? \"#000046\" : \"#a044ff\"\r\n  };\r\n  color: ${\r\n    props => props.player === 'O' ? \"#a044ff\" : props.player === 'X' ? \"#cbb4d4\" : \"black\"\r\n  };\r\n  border:${\r\n    props => props.player === 'O' ? \"1px dashed #cbb4d4\" : props.player === 'X' ? \"1px dashed #000046\" : \"1px dashed #a044ff\"\r\n  };\r\n  border-radius: 10px;\r\n  box-shadow: 0 0 0 2px #cbb4d4, 2px 1px 2px 3px rgba(10, 10, 0, 0.5);\r\n  float: none;\r\n  font-size: 50px;\r\n  font-weight: bold;\r\n  height: 400px;\r\n  line-height: 200px;\r\n  margin-left: 60px;\r\n  margin-top: 120px;\r\n  padding: 1px;\r\n  position: absolute;\r\n  text-align: center;\r\n  vertical-align: middle;\r\n  visibility: ${\r\n    // Prop to show overlay only when a game is over\r\n    props => props.gameover ? \"visible\" : \"hidden\"\r\n  };\r\n  width: 400px;\r\n  word-wrap: break-word;\r\n\r\n    &:hover {\r\n      opacity: 0.5;\r\n    }\r\n\r\n`;\r\n\r\n\r\nexport {AppWrapper, BoardWrap, GameTitle, Status, Reset, ResetButton, BoardRow, Psquares, OverlayCSS};\r\n","import React from 'react';\r\nimport {Psquares} from './styles.js';\r\n\r\nconst Square = props => {\r\n\r\n  return (\r\n  // adds props on square component to change value when clicking a square\r\n  <Psquares \r\n    style={{\r\n      // Pointer event to disable button clicks when its not user's turn\r\n      pointerEvents: props.disabled\r\n        ? 'none'\r\n        : 'auto'\r\n    }}\r\n    onClick={props.onClick}\r\n    player={props.player}\r\n    >\r\n  </Psquares>);\r\n}\r\n\r\nexport default Square;\r\n","// Functions used to generate game mechanics\r\n// such as logic to calculate the AI's best potential move\r\n// and calculating the squares(array) positions for a winning game \r\n\r\n\r\n// (board) param is simply this.state.squares in Board.js\r\n\r\n// checks state.squares[i] for \"O\" or \"X\" values and if none \r\n// pushes that squares[i] index to result array  \r\nconst getAvailableSpots = (board) => {\r\n  let result = [];\r\n  for (let i = 0; i < board.length; i++) {\r\n    if (!board[i]) {\r\n      result.push(i);\r\n    }\r\n  }\r\n  return result;\r\n};\r\n\r\n// logic to find if any of these 8 combos contains either \r\n// all \"X\" or \"O\", \r\nconst calculateWinner = (board) => {\r\n  const winningRows = [\r\n    [\r\n      0, 1, 2\r\n    ],\r\n    [\r\n      3, 4, 5\r\n    ],\r\n    [\r\n      6, 7, 8\r\n    ],\r\n    [\r\n      0, 3, 6\r\n    ],\r\n    [\r\n      1, 4, 7\r\n    ],\r\n    [\r\n      2, 5, 8\r\n    ],\r\n    [\r\n      0, 4, 8\r\n    ],\r\n    [\r\n      2, 4, 6\r\n    ]\r\n  ];\r\n  // Loops through winningRows array, and checks if squares at those \r\n  // indexes all have the same value, either \"X\" or \"O\" \r\n  for (let i = 0; i < winningRows.length; i++) {\r\n    const [a, b, c] = winningRows[i];\r\n    if (board[a] && board[a] === board[b] && board[a] === board[c]) {\r\n      // If they have same value return true and that value\r\n      return true && board[a];\r\n    }\r\n  }\r\n  return false;\r\n};\r\n\r\n// Logic used to calculate the best move for the AI\r\nconst minimize = (board) => {\r\n\r\n  const moves = getAvailableSpots(board);\r\n  if (calculateWinner(board)) {\r\n    return 1;\r\n  }\r\n  if (!moves.length) {\r\n    return 0;\r\n  }\r\n\r\n  let bestMove;\r\n  let bestValue = 100000;\r\n  for (let i = 0; i < moves.length; i++) {\r\n    board[moves[i]] = 'O';\r\n    let hValue = maximize(board);\r\n    if (Array.isArray(hValue)) {\r\n      hValue = hValue[0];\r\n    }\r\n    if (hValue < bestValue) {\r\n      bestMove = moves[i];\r\n      bestValue = hValue;\r\n    }\r\n    board[moves[i]] = null;\r\n  }\r\n\r\n  return [bestValue, bestMove];\r\n};\r\n\r\nconst maximize = (board) => {\r\n  const moves = getAvailableSpots(board);\r\n\r\n  if (calculateWinner(board)) {\r\n    return -1;\r\n  }\r\n\r\n  if (!moves.length) {\r\n    return 0;\r\n  }\r\n\r\n  let bestMove;\r\n  let bestValue = -100000;\r\n\r\n  for (let i = 0; i < moves.length; i++) {\r\n    board[moves[i]] = 'X';\r\n    let hValue = minimize(board);\r\n    if (Array.isArray(hValue)) {\r\n      hValue = hValue[0];\r\n    }\r\n    if (hValue > bestValue) {\r\n      bestMove = moves[i];\r\n      bestValue = hValue;\r\n    }\r\n    board[moves[i]] = null;\r\n  }\r\n\r\n  return [bestValue, bestMove];\r\n};\r\n\r\nexport {maximize, calculateWinner};","import React, {Component} from 'react';\r\nimport Square from '../view/square.js';\r\nimport {BoardWrap, GameTitle, Status, Reset, ResetButton, BoardRow, OverlayCSS} from '../view/styles.js'\r\nimport {maximize, calculateWinner} from './GameAI';\r\n\r\n// EVERYTHING THAT APPEARS IN OR AROUND BOARD\r\nexport default class Board extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      squares: new Array(9).fill(null),\r\n      myTurn: true,\r\n      userScore: 0,\r\n      aiScore: 0\r\n    }\r\n  }\r\n  \r\n    // Renders the square and inserts the values(o, x's) and adds event listeners\r\n  renderSquare = (i) => {\r\n    const winner = calculateWinner(this.state.squares);\r\n    let squares = [...this.state.squares];\r\n\r\n    if (squares[i] === 'O') {\r\n      // Returns a new square with player atr and 'O' text(value) when clicked\r\n      return (<Square disabled={true}  player={'player'} value={this.state.squares[i]}/>);\r\n      // Does the same for AI\r\n    }else if (squares[i] === 'X') {\r\n      return (<Square disabled={true}  player={'AI'} value={this.state.squares[i]}/>);\r\n    }else{\r\n      // Default rendered squares when ...squares[i] is empty(nulled)\r\n    return (<Square disabled={winner ? true : !this.state.myTurn} value={this.state.squares[i]} onClick={() => this.handleClick(i)}/>);\r\n    }\r\n  }\r\n\r\n  renderOverlay = () => {\r\n    let winner = calculateWinner(this.state.squares);\r\n\r\n    // let theWinner = (winner === 'X') ? this.setState(currentScore => {\r\n    //   return {aiScore: currentScore.aiScore++}\r\n    // }) : 'You';\r\n\r\n    if(winner) {\r\n      let gameWinner = (winner === 'X') ? 'CPU' : 'You';\r\n      \r\n      return (<OverlayCSS player={winner} gameover={true} onClick={this.handleReset}> {`${gameWinner} won! Click to Replay`} </OverlayCSS>)\r\n    //checks squares states to see if all the default null state values are gone\r\n    }else if (!this.state.squares.includes(null)) {\r\n      return (<OverlayCSS gameover={true} onClick={this.handleReset}> Draw!  Click to Replay </OverlayCSS>)\r\n    }\r\n  }\r\n\r\n\r\n  handleClick = (i) => {\r\n    let squares = [...this.state.squares];\r\n    // Adds player choice as soon as clicked\r\n    squares[i] = 'O';\r\n    // Sets current state of myTurn to false not disabling square clicks until AI chooses;\r\n    this.setState(currentState => {\r\n      return {squares, myTurn: !currentState.myTurn}\r\n    });\r\n    // Calls setTimeout on the AI logic function and set state to add 'realistic' A.I delay\r\n    setTimeout(() => {\r\n      const best = maximize(squares);\r\n      // Sets AI square to X then changes state.myTurn back to true to allow player turn\r\n      squares[best[1]] = 'X';\r\n      this.setState(currentState => {\r\n          return {squares, myTurn: !currentState.myTurn,}\r\n        }\r\n      )\r\n    },\r\n    500);\r\n\r\n  }\r\n  // Function that resets the board by resetting the state to defualt values\r\n  handleReset = () => {\r\n    /* Small delay on reset function for bug that allows 'AI'\r\n       to render a chosen square if you click the  \r\n       reset button immediately after your own choice */\r\n\r\n    setTimeout(() => {\r\n      this.setState({squares: Array(9).fill(null), myTurn: true});\r\n    }, 300);\r\n  };\r\n\r\n  // Reset Button for the handleReset callback\r\n  resetButton = () => {\r\n    const winner = calculateWinner(this.state.squares);\r\n    // Hides the reset button, with css from styles.js, when the games over \r\n    if (winner || !this.state.squares.includes(null)) {\r\n    return <ResetButton gameover={false}>RESET</ResetButton>;\r\n    }else{\r\n      return <ResetButton gameover={true} onClick={() => this.handleReset()} >RESET</ResetButton>;\r\n    }\r\n  };\r\n  // Renders and returns Board Component\r\n  render() {\r\n    let status = 'You Go First!';\r\n    return (\r\n    <BoardWrap>\r\n        <GameTitle>React Tac Toe</GameTitle>\r\n        <Status>{status}</Status>\r\n        {this.renderOverlay()}\r\n        <Reset>\r\n          {this.resetButton()}\r\n        </Reset>\r\n        <BoardRow>\r\n          {this.renderSquare(0)}\r\n          {this.renderSquare(1)}\r\n          {this.renderSquare(2)}\r\n        </BoardRow>\r\n        <BoardRow>\r\n          {this.renderSquare(3)}\r\n          {this.renderSquare(4)}\r\n          {this.renderSquare(5)}\r\n        </BoardRow>\r\n        <BoardRow>\r\n          {this.renderSquare(6)}\r\n          {this.renderSquare(7)}\r\n          {this.renderSquare(8)}\r\n        </BoardRow>\r\n    </BoardWrap>);\r\n  }\r\n}\r\n\r\n\r\n","import React, {Component} from 'react';\r\nimport Board from './Board.js';\r\nimport {AppWrapper} from '../view/styles.js'\r\n\r\n\r\nexport default class App extends Component {\r\n  render(){\r\n    return (\r\n      <AppWrapper>\r\n        <Board />\r\n      </AppWrapper>\r\n    )\r\n  }\r\n}\r\n","import React from 'react';\r\nimport {render} from 'react-dom';\r\nimport App from './components/App';\r\nimport './index.css';\r\n\r\nrender(<App/>, document.getElementById('main'));\r\n"],"sourceRoot":""}